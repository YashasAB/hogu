That TS2352 is telling you you’ve (accidentally) created a one-element array of Buffer and tried to cast it to a Uint8Array. In other words, somewhere you have square brackets around a Buffer, e.g.:
// ❌ examples that trigger your exact error
const bytes: Uint8Array = [Buffer.from(...)] as any;
const bufArr: [Buffer] = [Buffer.from(...)]
res.send([buffer]) // <-- also causes the earlier overload error
You don’t want an array at all. You want:
Keep value as a Uint8Array, straight from downloadAsBytes.
Convert that Uint8Array to a Node Buffer (no brackets).
Send the Buffer.
Here’s the minimal, type-safe core you can drop in:
const { ok, value } = await storageClient.downloadAsBytes(key);
if (!ok || !value) {
  return res.status(404).json({ error: "Image not found", path: key });
}

// value is already Uint8Array
const u8 = value as Uint8Array;

// Safest Buffer construction (no TS overload ambiguity)
const buffer = Buffer.from(u8.buffer, u8.byteOffset, u8.byteLength);

// Optional: quick hex sig log, *no* number.toString(16) confusion
const sigHex = buffer.subarray(0, 4).toString("hex");
console.log("signature:", sigHex);

// Content-Type detection (example)
const ext = filename.split(".").pop()?.toLowerCase();
const contentType =
  ext === "png"  ? "image/png"  :
  ext === "jpg"  ? "image/jpeg" :
  ext === "jpeg" ? "image/jpeg" :
  ext === "gif"  ? "image/gif"  :
  ext === "webp" ? "image/webp" :
  ext === "svg"  ? "image/svg+xml" :
  "application/octet-stream";

res.set({
  "Content-Type": contentType,
  "Content-Length": String(buffer.length),
  "Cache-Control": "public, max-age=31536000, immutable",
  "Access-Control-Allow-Origin": "*",
  "Access-Control-Allow-Methods": "GET, HEAD, OPTIONS",
  "Access-Control-Allow-Headers": "Content-Type, Cache-Control",
  "Content-Disposition": `inline; filename="${filename}"`,
});

// ✅ Send the raw Buffer (no brackets!)
return res.send(buffer);
Quick checklist to kill this error
Search your file for these patterns and remove the brackets:
=[Buffer.from( → change to = Buffer.from(
res.send([buffer]) → res.send(buffer)
Any cast like as Uint8Array<ArrayBufferLike> applied to [Buffer.from(...)] → remove the array and the cast