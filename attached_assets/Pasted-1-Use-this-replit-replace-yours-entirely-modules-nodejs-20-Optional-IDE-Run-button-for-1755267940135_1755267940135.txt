1) Use this .replit (replace yours entirely)
modules = ["nodejs-20"]

# Optional: IDE Run button for local dev
run = "bash -lc \"pnpm dev\""

[nix]
channel = "stable-25_05"

[deployment]
# Build from ROOT using pnpm; run prisma commands inside apps/api
build = [
  "bash","-lc",
  "set -euo pipefail; \
   corepack enable; pnpm -v; \
   # install deps
   pnpm i --frozen-lockfile; \
   pnpm -C apps/api i --frozen-lockfile; \
   pnpm -C apps/web i --frozen-lockfile || true; \
   # build web (if present) and api
   pnpm -C apps/web build || true; \
   pnpm -C apps/api build; \
   # ensure a writable SQLite path for Prisma if DATABASE_URL isn't set
   mkdir -p apps/api/data; \
   export DATABASE_URL=${DATABASE_URL:-file:./data/prod.db}; \
   # prisma generate + migrate (or push if no migrations)
   pnpm -C apps/api prisma generate; \
   pnpm -C apps/api prisma migrate deploy || pnpm -C apps/api prisma db push"
]

# Run from apps/api, on the platform port, in production
run = ["bash","-lc","cd apps/api && export DATABASE_URL=${DATABASE_URL:-file:./data/prod.db} && PORT=$PORT NODE_ENV=production node dist/index.js"]
Important:
Delete every [[ports]] block you had. Autoscale wants one service port; it injects $PORT for you.
We use corepack enable so pnpm is available in the container.
If you don’t have apps/web, the || true bits keep the build happy.
2) Root package.json (optional but nice)
{
  "name": "root",
  "private": true,
  "packageManager": "pnpm@9",
  "scripts": {
    "dev": "concurrently -k -n WEB,API -c cyan,magenta \"pnpm -C apps/web dev\" \"pnpm -C apps/api dev\"",
    "build": "pnpm -C apps/web build && pnpm -C apps/api build",
    "build:api": "pnpm -C apps/api build",
    "build:web": "pnpm -C apps/web build",
    "migrate": "cd apps/api && pnpm prisma migrate deploy"
  },
  "devDependencies": {
    "concurrently": "^8.2.0"
  }
}
This keeps pnpm as the single package manager. If you previously had npm scripts here, switch them to pnpm.
3) apps/api/package.json (make “start” prod-safe)
{
  "name": "hogu-api",
  "private": true,
  "type": "module",
  "scripts": {
    "dev": "ts-node src/index.ts",
    "build": "tsc -p tsconfig.json",
    "start": "NODE_ENV=production node dist/index.js",
    "prisma:generate": "prisma generate",
    "prisma:migrate": "prisma migrate deploy",
    "prisma:push": "prisma db push"
  }
}
4) Prisma / DB URL (avoid “migration may fail”)
In code, set a SQLite fallback early, and make sure the folder exists:
import fs from "fs";
import path from "path";
// …
const dbDir = path.join(process.cwd(), "data");
fs.mkdirSync(dbDir, { recursive: true });
if (!process.env.DATABASE_URL) {
  process.env.DATABASE_URL = `file:${path.join(dbDir, "prod.db")}`;
}
(You already set a fallback; switch it from file:./dev.db to file:./data/prod.db to match the build/run commands above.)