import { useRef, useState } from 'react'
import { Link } from 'react-router-dom'

type Restaurant = {
  id: string
  name: string
  slug: string
  neighborhood: string
  emoji: string
  image: string
  position: { x: number; y: number } // percentages in the 800x600 viewBox space
}

// Approximate demo positions on the SVG (tweak as you like)
const restaurants: Restaurant[] = [
  {
    id: 'naru',
    name: 'Naru Noodle Bar',
    slug: 'naru-noodle-bar',
    neighborhood: 'Indiranagar',
    emoji: 'üçú',
    image: 'https://images.unsplash.com/photo-1544025162-d76694265947?q=80&w=1000',
    position: { x: 42.5, y: 26.7 }
  },
  {
    id: 'soka',
    name: 'Soka',
    slug: 'soka',
    neighborhood: 'Koramangala',
    emoji: 'üç£',
    image: 'https://images.unsplash.com/photo-1559339352-11d035aa65de?q=80&w=1000',
    position: { x: 68.2, y: 44.2 }
  },
  {
    id: 'zlb',
    name: 'ZLB',
    slug: 'zlb',
    neighborhood: 'MG Road',
    emoji: 'üç∏',
    image: 'https://images.unsplash.com/photo-1517248135467-4c7edcad34c4?q=80&w=1000',
    position: { x: 50, y: 33 }
  },
  {
    id: 'spirit-forward',
    name: 'Spirit Forward',
    slug: 'spirit-forward',
    neighborhood: 'Indiranagar',
    emoji: 'ü•É',
    image: 'https://images.unsplash.com/photo-1514362545857-3bc16c4c76ea?q=80&w=1000',
    position: { x: 45, y: 28.5 }
  }
]

export default function BengaluruMap() {
  // Pan/zoom state
  const [mapTransform, setMapTransform] = useState({ scale: 1, x: 0, y: 0 })
  const [dragging, setDragging] = useState(false)
  const dragStart = useRef<{ dx: number; dy: number }>({ dx: 0, dy: 0 })

  // Selection
  const [selectedRestaurant, setSelectedRestaurant] = useState<Restaurant | null>(null)

  const handleMouseDown = (e: React.MouseEvent<HTMLDivElement>) => {
    setDragging(true)
    // store offset between pointer and current translation
    dragStart.current = { dx: e.clientX - mapTransform.x, dy: e.clientY - mapTransform.y }
  }

  const handleMouseMove = (e: React.MouseEvent<HTMLDivElement>) => {
    if (!dragging) return
    setMapTransform(prev => ({
      ...prev,
      x: e.clientX - dragStart.current.dx,
      y: e.clientY - dragStart.current.dy
    }))
  }

  const handleMouseUp = () => setDragging(false)

  const handleWheel = (e: React.WheelEvent<HTMLDivElement>) => {
    // Prevent page scroll while zooming the map
    e.preventDefault()
    const factor = e.deltaY > 0 ? 0.9 : 1.1
    setMapTransform(prev => ({
      ...prev,
      scale: Math.max(0.6, Math.min(3, prev.scale * factor))
    }))
  }

  const handleRestaurantClick = (r: Restaurant) => setSelectedRestaurant(r)
  const closePopup = () => setSelectedRestaurant(null)

  return (
    <section id="map" className="space-y-4">
      <div className="relative overflow-hidden rounded-2xl text-white">
        <div className="absolute inset-0 bg-gradient-to-br from-brand to-brand/80" />
        <div className="relative z-10 px-5 py-6 sm:px-8">
          <h2 className="text-xl font-semibold mb-2">Interactive Bengaluru Map</h2>
          <p className="opacity-90 text-sm">
            Use mouse wheel to zoom, click and drag to move around. Click on restaurant markers to see details.
          </p>
        </div>
      </div>

      <div className="mx-4 sm:mx-8">
        <div
          className={`relative bg-gray-100 rounded-2xl overflow-hidden shadow-lg border border-gray-200 select-none ${
            dragging ? 'cursor-grabbing' : 'cursor-grab'
          }`}
          style={{ height: '600px' }}
          onMouseDown={handleMouseDown}
          onMouseMove={handleMouseMove}
          onMouseUp={handleMouseUp}
          onMouseLeave={handleMouseUp}
          onWheel={handleWheel}
        >
          {/* Pan/zoom layer */}
          <div
            className="absolute inset-0 transition-transform duration-200"
            style={{
              transform: `translate(${mapTransform.x}px, ${mapTransform.y}px) scale(${mapTransform.scale})`,
              transformOrigin: 'center center'
            }}
          >
            {/* SVG backdrop */}
            <svg width="100%" height="100%" viewBox="0 0 800 600" className="absolute inset-0">
              {/* Background */}
              <rect width="800" height="600" fill="#f0f9ff" />

              {/* Outer Ring Road */}
              <circle cx="400" cy="300" r="280" fill="none" stroke="#6b7280" strokeWidth="8" opacity="0.6" />

              {/* Major Roads */}
              <line x1="0" y1="200" x2="800" y2="200" stroke="#6b7280" strokeWidth="6" opacity="0.7" />
              <line x1="0" y1="400" x2="800" y2="400" stroke="#6b7280" strokeWidth="6" opacity="0.7" />
              <line x1="200" y1="0" x2="200" y2="600" stroke="#6b7280" strokeWidth="6" opacity="0.7" />
              <line x1="600" y1="0" x2="600" y2="600" stroke="#6b7280" strokeWidth="6" opacity="0.7" />

              {/* Neighborhoods */}
              <rect x="280" y="120" width="120" height="80" rx="12" fill="#dbeafe" stroke="#3b82f6" strokeWidth="2" opacity="0.8" />
              <text x="340" y="155" textAnchor="middle" fontSize="14" fontWeight="bold" fill="#1e40af">Indiranagar</text>

              <rect x="480" y="220" width="130" height="90" rx="12" fill="#dcfce7" stroke="#22c55e" strokeWidth="2" opacity="0.8" />
              <text x="545" y="260" textAnchor="middle" fontSize="14" fontWeight="bold" fill="#166534">Koramangala</text>

              <rect x="180" y="400" width="120" height="80" rx="12" fill="#fef3c7" stroke="#f59e0b" strokeWidth="2" opacity="0.8" />
              <text x="240" y="435" textAnchor="middle" fontSize="14" fontWeight="bold" fill="#92400e">HSR Layout</text>

              <rect x="80" y="180" width="100" height="70" rx="12" fill="#e9d5ff" stroke="#a855f7" strokeWidth="2" opacity="0.8" />
              <text x="130" y="210" textAnchor="middle" fontSize="12" fontWeight="bold" fill="#7c3aed">UB City</text>
            </svg>

            {/* Restaurant Markers */}
            {restaurants.map((restaurant) => (
              <button
                key={restaurant.id}
                onClick={() => handleRestaurantClick(restaurant)}
                className="absolute transform -translate-x-1/2 -translate-y-1/2 text-3xl hover:scale-125 transition-all duration-300 bg-white rounded-full w-16 h-16 flex items-center justify-center shadow-lg hover:shadow-xl border-2 border-white hover:border-brand z-10"
                style={{
                  left: `${restaurant.position.x}%`,
                  top: `${restaurant.position.y}%`
                }}
                title={restaurant.name}
              >
                {restaurant.emoji}
              </button>
            ))}
          </div>

          {/* Controls */}
          <div className="absolute top-4 right-4 flex flex-col gap-2 z-20">
            <button
              onClick={() => setMapTransform(prev => ({ ...prev, scale: Math.min(3, prev.scale * 1.2) }))}
              className="btn w-10 h-10 p-0 text-lg"
              title="Zoom In"
            >+</button>
            <button
              onClick={() => setMapTransform(prev => ({ ...prev, scale: Math.max(0.6, prev.scale * 0.8) }))}
              className="btn w-10 h-10 p-0 text-lg"
              title="Zoom Out"
            >‚àí</button>
            <button
              onClick={() => setMapTransform({ scale: 1, x: 0, y: 0 })}
              className="btn px-2 py-1 text-xs"
              title="Reset View"
            >Reset</button>
          </div>

          {/* Popup */}
          {selectedRestaurant && (
            <div className="absolute inset-0 bg-black/50 flex items-center justify-center z-50">
              <div className="card max-w-sm mx-4">
                <div className="flex justify-between items-start mb-4">
                  <h3 className="text-xl font-bold text-brand">{selectedRestaurant.name}</h3>
                  <button
                    onClick={closePopup}
                    className="text-gray-400 hover:text-gray-600 text-2xl leading-none"
                  >√ó</button>
                </div>

                <img
                  src={selectedRestaurant.image}
                  alt={selectedRestaurant.name}
                  className="w-full h-40 object-cover rounded-xl mb-4"
                />

                <p className="text-muted mb-4 font-medium">{selectedRestaurant.neighborhood}</p>

                <div className="flex gap-3">
                  <Link
                    to={`/r/${selectedRestaurant.slug}`}
                    className="btn btn-primary flex-1"
                    onClick={closePopup}
                  >Reserve Now</Link>
                  <button onClick={closePopup} className="btn">Close</button>
                </div>
              </div>
            </div>
          )}
        </div>
      </div>
    </section>
  )
}
