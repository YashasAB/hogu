import React, { useEffect, useMemo, useState } from "react";

// -------------------------------------------------------------
// Restaurant Admin â€” Live Slots & Bookings (Warm Dark Red Theme)
// TailwindCSS only. Mobile-first. Drop into your app & preview.
// Replace the mockAPI calls with your real backend endpoints.
// -------------------------------------------------------------

// Types
 type SlotStatus = "open" | "held" | "booked" | "closed";
 type BookingStatus = "booked" | "seated" | "cancelled" | "no-show";

 type Slot = {
  id: string;
  date: string; // YYYY-MM-DD
  time: string; // HH:MM (24h)
  capacity: number; // seats available for the slot
  status: SlotStatus;
  bookingId?: string | null;
};

 type Booking = {
  id: string;
  slotId: string;
  guestName: string;
  phone?: string;
  partySize: number;
  status: BookingStatus;
  createdAt: string; // ISO
};

// ------------------------- Mock API (replace me!) -------------------------
const delay = (ms:number)=> new Promise(res=>setTimeout(res, ms));
let _slots: Slot[] = [];
let _bookings: Booking[] = [];

// seed a little demo data for "today"
(function seed(){
  const today = new Date();
  const d = today.toISOString().split('T')[0];
  const times = ["18:00","18:30","19:00","19:30","20:00","20:30","21:00","21:30","22:00"];
  _slots = times.map((t,i)=>({
    id: `s-${i}`,
    date: d,
    time: t,
    capacity: Math.random() > 0.2 ? 4 : 2,
    status: Math.random() < 0.15 ? "booked" : "open",
    bookingId: null,
  }));
  // mark a couple as booked with sample bookings
  _slots.filter(s=>s.status==="booked").slice(0,2).forEach((s,idx)=>{
    const b: Booking = {
      id: `b-${idx}`,
      slotId: s.id,
      guestName: idx?"Ananya Iyer":"Rohit Kumar",
      phone: "+1 555-0123",
      partySize: 2+idx,
      status: "booked",
      createdAt: new Date().toISOString(),
    };
    _bookings.push(b); s.bookingId=b.id;
  });
})();

const mockAPI = {
  async listSlots(date: string){ await delay(300); return _slots.filter(s=>s.date===date); },
  async listBookings(date: string){ await delay(300); const ids = _slots.filter(s=>s.date===date && s.bookingId).map(s=>s.bookingId as string); return _bookings.filter(b=>ids.includes(b.id)); },
  async addSlots(payload: {date:string; start:string; end:string; interval:number; capacity:number}){
    await delay(400);
    const toMinutes = (t:string)=>{const [H,M]=t.split(":").map(Number);return H*60+M};
    const fmt = (m:number)=>`${String(Math.floor(m/60)).padStart(2,"0")}:${String(m%60).padStart(2,"0")}`;
    const start = toMinutes(payload.start), end = toMinutes(payload.end);
    const created: Slot[] = [];
    for(let m=start; m<=end; m+=payload.interval){
      const id = `s-${Date.now()}-${m}-${Math.random().toString(36).slice(2,6)}`;
      const slot: Slot = { id, date: payload.date, time: fmt(m), capacity: payload.capacity, status: "open" };
      _slots.push(slot); created.push(slot);
    }
    return created;
  },
  async updateSlotStatus(slotIds: string[], status: SlotStatus){ await delay(250); _slots = _slots.map(s=> slotIds.includes(s.id) ? { ...s, status, bookingId: status!=="booked"? null: s.bookingId } : s); return true; },
  async deleteSlots(slotIds: string[]){ await delay(250); _slots = _slots.filter(s=> !slotIds.includes(s.id)); return true; },
  async freeSlot(slotId: string){ await delay(200); _slots = _slots.map(s=> s.id===slotId ? { ...s, status: "open", bookingId: null } : s); return true; },
  async setBookingStatus(bookingId: string, status: BookingStatus){ await delay(250); _bookings = _bookings.map(b=> b.id===bookingId?{...b,status}:b); return true; }
};

// ----------------------------- UI elements ------------------------------
const Dot: React.FC<{ status: SlotStatus }>=({status})=>{
  const map: Record<SlotStatus,string>={
    open:"bg-emerald-400",
    held:"bg-amber-400",
    booked:"bg-rose-500",
    closed:"bg-slate-500",
  };
  return <span className={`inline-block w-2.5 h-2.5 rounded-full ${map[status]}`} aria-hidden/>;
};

const StatCard: React.FC<{label:string; value:string | number; hint?:string}> = ({label,value,hint})=> (
  <div className="rounded-2xl p-4 ring-1 ring-white/10 bg-slate-900/70">
    <div className="text-xs text-slate-400 mb-1">{label}</div>
    <div className="text-2xl font-bold">{value}</div>
    {hint && <div className="text-xs text-slate-500 mt-1">{hint}</div>}
  </div>
);

const PillBtn: React.FC<React.ButtonHTMLAttributes<HTMLButtonElement>> = ({className='', children, ...props}) => (
  <button
    {...props}
    className={`px-3 h-10 rounded-xl text-sm font-semibold border transition ${className}`}
  >{children}</button>
);

const SectionTitle: React.FC<{children:React.ReactNode}> = ({children}) => (
  <h2 className="text-lg sm:text-xl font-semibold">{children}</h2>
);

// ------------------------------ Main Page -------------------------------
export default function RestaurantAdminPanel(){
  const [date, setDate] = useState(() => new Date().toISOString().split('T')[0]);
  const [slots, setSlots] = useState<Slot[]>([]);
  const [bookings, setBookings] = useState<Booking[]>([]);
  const [selected, setSelected] = useState<Record<string,boolean>>({});
  const [loading, setLoading] = useState(false);
  const [liveTick, setLiveTick] = useState(0); // pretend realtime tick

  const selectedIds = useMemo(()=> Object.keys(selected).filter(id=>selected[id]), [selected]);

  const refresh = async ()=>{
    setLoading(true);
    const [sl, bk] = await Promise.all([mockAPI.listSlots(date), mockAPI.listBookings(date)]);
    setSlots(sl.sort((a,b)=> a.time.localeCompare(b.time)));
    setBookings(bk);
    setLoading(false);
  };

  useEffect(()=>{ refresh(); }, [date, liveTick]);

  // Simulate server push every 15s (e.g., new booking)
  useEffect(()=>{
    const t = setInterval(()=> setLiveTick(x=>x+1), 15000);
    return ()=> clearInterval(t);
  },[]);

  // ------- Derived stats
  const stat = useMemo(()=>{
    const total = slots.length;
    const open = slots.filter(s=>s.status==='open').length;
    const booked = slots.filter(s=>s.status==='booked').length;
    const closed = slots.filter(s=>s.status==='closed').length;
    return { total, open, booked, closed };
  },[slots]);

  // ------- Slot bulk operations
  const setStatus = async (status: SlotStatus)=>{
    if(selectedIds.length===0) return;
    await mockAPI.updateSlotStatus(selectedIds, status);
    setSelected({});
    refresh();
  };
  const deleteSel = async ()=>{ if(selectedIds.length===0) return; await mockAPI.deleteSlots(selectedIds); setSelected({}); refresh(); };
  const freeFirst = async ()=>{ if(selectedIds[0]){ await mockAPI.freeSlot(selectedIds[0]); setSelected({}); refresh(); } };

  // ------- Add slot(s) form state
  const [start, setStart] = useState("18:00");
  const [end, setEnd] = useState("22:00");
  const [interval, setInterval] = useState(30);
  const [capacity, setCapacity] = useState(4);

  const addSlots = async ()=>{
    await mockAPI.addSlots({date, start, end, interval, capacity});
    refresh();
  };

  return (
    <div className="min-h-dvh bg-slate-950 text-slate-100" style={{ paddingBottom: 'env(safe-area-inset-bottom)' }}>
      {/* Top bar */}
      <div className="sticky top-0 z-40 backdrop-blur border-b border-white/10 bg-slate-950/80">
        <div className="max-w-6xl mx-auto px-3 sm:px-4 py-2.5 flex items-center gap-3">
          <div className="w-2.5 h-2.5 rounded-full bg-rose-500 shadow-[0_0_0_6px_rgba(244,63,94,.18)]" />
          <div className="text-sm">Restaurant Console</div>
          <div className="ml-auto flex items-center gap-2">
            <input type="date" value={date} onChange={e=>setDate(e.target.value)}
              className="bg-slate-900/80 border border-white/10 rounded-xl px-3 h-10 text-sm focus:outline-none focus:ring-2 focus:ring-rose-500/30"/>
          </div>
        </div>
      </div>

      <div className="max-w-6xl mx-auto px-3 sm:px-4 py-4 sm:py-6 lg:py-8 space-y-6">
        {/* Stats */}
        <div className="grid grid-cols-2 sm:grid-cols-4 gap-3 sm:gap-4">
          <StatCard label="Total slots" value={stat.total} />
          <StatCard label="Open" value={stat.open} />
          <StatCard label="Booked" value={stat.booked} />
          <StatCard label="Closed" value={stat.closed} />
        </div>

        {/* Add slots */}
        <section className="rounded-2xl p-4 ring-1 ring-white/10 bg-slate-900/70">
          <div className="flex items-center justify-between mb-3">
            <SectionTitle>Add slots</SectionTitle>
            <div className="text-xs text-slate-400">Date: {date}</div>
          </div>
          <div className="grid grid-cols-2 sm:grid-cols-5 gap-3">
            <div>
              <label className="block text-xs text-slate-400 mb-1">Start</label>
              <input type="time" value={start} onChange={e=>setStart(e.target.value)} className="w-full h-10 rounded-xl bg-slate-800 border border-white/10 px-3" />
            </div>
            <div>
              <label className="block text-xs text-slate-400 mb-1">End</label>
              <input type="time" value={end} onChange={e=>setEnd(e.target.value)} className="w-full h-10 rounded-xl bg-slate-800 border border-white/10 px-3" />
            </div>
            <div>
              <label className="block text-xs text-slate-400 mb-1">Interval</label>
              <select value={interval} onChange={e=>setInterval(parseInt(e.target.value))} className="w-full h-10 rounded-xl bg-slate-800 border border-white/10 px-3">
                {[15,20,30,45,60].map(n=> <option key={n} value={n}>{n} min</option>)}
              </select>
            </div>
            <div>
              <label className="block text-xs text-slate-400 mb-1">Capacity</label>
              <select value={capacity} onChange={e=>setCapacity(parseInt(e.target.value))} className="w-full h-10 rounded-xl bg-slate-800 border border-white/10 px-3">
                {[1,2,3,4,5,6,8].map(n=> <option key={n} value={n}>{n} seats</option>)}
              </select>
            </div>
            <div className="flex items-end">
              <PillBtn onClick={addSlots} className="w-full bg-gradient-to-r from-rose-600 to-amber-500 text-slate-900 border-transparent">Add</PillBtn>
            </div>
          </div>
        </section>

        {/* Bulk actions */}
        <section className="rounded-2xl p-4 ring-1 ring-white/10 bg-slate-900/70">
          <div className="flex items-center justify-between mb-3">
            <SectionTitle>Manage slots</SectionTitle>
            <div className="text-xs text-slate-400">Selected: {selectedIds.length}</div>
          </div>
          <div className="flex flex-wrap gap-2">
            <PillBtn onClick={()=>setStatus('open')} className="bg-slate-800 border-white/10 hover:border-emerald-400/40">Open</PillBtn>
            <PillBtn onClick={()=>setStatus('held')} className="bg-slate-800 border-white/10 hover:border-amber-400/40">Hold</PillBtn>
            <PillBtn onClick={()=>setStatus('closed')} className="bg-slate-800 border-white/10 hover:border-slate-400/40">Close</PillBtn>
            <PillBtn onClick={freeFirst} className="bg-slate-800 border-white/10 hover:border-rose-400/40">Free up (1)</PillBtn>
            <PillBtn onClick={deleteSel} className="bg-rose-600/20 border border-rose-500/40 text-rose-200 hover:bg-rose-600/30">Delete</PillBtn>
          </div>
        </section>

        {/* Slots & Bookings lists */}
        <div className="grid grid-cols-1 lg:grid-cols-2 gap-4">
          {/* Slots table */}
          <section className="rounded-2xl p-4 ring-1 ring-white/10 bg-slate-900/70">
            <div className="flex items-center justify-between mb-3">
              <SectionTitle>Today\'s slots</SectionTitle>
              {loading && <div className="text-xs text-slate-400 animate-pulse">Refreshingâ€¦</div>}
            </div>
            {slots.length===0 ? (
              <div className="text-sm text-slate-400">No slots created for this date.</div>
            ):(
              <ul className="divide-y divide-white/5">
                {slots.map(s=>{
                  const checked = !!selected[s.id];
                  return (
                    <li key={s.id} className="py-2 flex items-center gap-3">
                      <input type="checkbox" className="accent-rose-500 w-4 h-4" checked={checked} onChange={e=> setSelected(prev=>({...prev, [s.id]: e.target.checked}))} />
                      <Dot status={s.status} />
                      <div className="font-semibold w-16">{s.time}</div>
                      <div className="text-xs text-slate-400">{s.capacity} seats</div>
                      <div className="ml-auto">
                        {s.status==='booked' ? (
                          <span className="px-2 py-1 rounded-full text-xs font-semibold bg-rose-600/20 border border-rose-500/40 text-rose-200">Booked</span>
                        ) : s.status==='open' ? (
                          <span className="px-2 py-1 rounded-full text-xs font-semibold bg-emerald-600/20 border border-emerald-500/40 text-emerald-200">Open</span>
                        ) : s.status==='held' ? (
                          <span className="px-2 py-1 rounded-full text-xs font-semibold bg-amber-600/20 border border-amber-500/40 text-amber-100">Held</span>
                        ) : (
                          <span className="px-2 py-1 rounded-full text-xs font-semibold bg-slate-600/20 border border-slate-500/40 text-slate-200">Closed</span>
                        )}
                      </div>
                    </li>
                  );
                })}
              </ul>
            )}
          </section>

          {/* Bookings table */}
          <section className="rounded-2xl p-4 ring-1 ring-white/10 bg-slate-900/70">
            <div className="flex items-center justify-between mb-3">
              <SectionTitle>Bookings</SectionTitle>
              <div className="text-xs text-slate-400">{bookings.length} total</div>
            </div>
            {bookings.length===0 ? (
              <div className="text-sm text-slate-400">No bookings for this date yet.</div>
            ):(
              <ul className="divide-y divide-white/5">
                {bookings.map(b=>{
                  const slot = slots.find(s=>s.id===b.slotId);
                  return (
                    <li key={b.id} className="py-3 grid grid-cols-5 gap-2 items-center">
                      <div className="col-span-2">
                        <div className="font-semibold">{b.guestName}</div>
                        <div className="text-xs text-slate-400">{b.phone||'â€”'}</div>
                      </div>
                      <div className="text-sm">{slot?.time || 'â€”'}</div>
                      <div className="text-sm">{b.partySize} {b.partySize===1?'pax':'pax'}</div>
                      <div className="ml-auto flex items-center gap-2">
                        <select value={b.status} onChange={async (e)=>{ await mockAPI.setBookingStatus(b.id, e.target.value as BookingStatus); refresh(); }} className="bg-slate-800 border border-white/10 rounded-lg px-2 h-9 text-xs">
                          {(["booked","seated","cancelled","no-show"] as BookingStatus[]).map(s=> <option key={s} value={s}>{s}</option>)}
                        </select>
                      </div>
                    </li>
                  );
                })}
              </ul>
            )}
          </section>
        </div>

        {/* Help / wiring */}
        <div className="rounded-2xl p-4 ring-1 ring-white/10 bg-slate-900/50 text-xs text-slate-400">
          Replace <code>mockAPI</code> with your endpoints:
          <ul className="list-disc ml-5 mt-2 space-y-1">
            <li><code>GET /api/slots?date=YYYY-MM-DD</code> â†’ listSlots</li>
            <li><code>GET /api/bookings?date=YYYY-MM-DD</code> â†’ listBookings</li>
            <li><code>POST /api/slots/bulk</code> with {`{ date, start, end, interval, capacity }`} â†’ addSlots</li>
            <li><code>PATCH /api/slots</code> with {`{ ids: string[], status }`} â†’ updateSlotStatus</li>
            <li><code>PATCH /api/slots/:id/free</code> â†’ freeSlot</li>
            <li><code>DELETE /api/slots</code> with {`{ ids: string[] }`} â†’ deleteSlots</li>
            <li><code>PATCH /api/bookings/:id</code> with {`{ status }`} â†’ setBookingStatus</li>
          </ul>
        </div>
      </div>

      {/* Mobile bottom info bar (optional) */}
      <div className="md:hidden fixed inset-x-0 bottom-0 bg-slate-950/85 backdrop-blur border-t border-white/10 p-3">
        <div className="flex items-center justify-between text-xs">
          <div>Open: <span className="text-emerald-300 font-semibold">{stat.open}</span> â€¢ Booked: <span className="text-rose-300 font-semibold">{stat.booked}</span></div>
          <button onClick={refresh} className="px-3 h-9 rounded-xl bg-gradient-to-r from-rose-600 to-amber-500 text-slate-900 text-sm font-bold">Refresh</button>
        </div>
      </div>
    </div>
  );
}
