Below is a tight, copy-paste fix. It makes Deployments:
build in the right dirs,
run npm from root (as you asked),
run npx / node from apps/api,
bind to the platform $PORT,
return a fast 200 on /,
stop the “restarting” loop.
1) Replace your .replit with this minimal version
modules = ["nodejs-20"]

# (Optional) IDE Run button (local dev only)
run = "bash -lc \"npm run dev\""

[nix]
channel = "stable-25_05"

[deployment]
# Build from ROOT; then run prisma + node inside apps/api
build = [
  "bash","-lc",
  # install deps at root and each workspace (adjust if you don't have apps/web)
  "npm ci && npm --prefix apps/web ci || true && npm --prefix apps/api ci && \
   npm --prefix apps/web run build || true && \
   npm --prefix apps/api run build && \
   cd apps/api && npx prisma generate && npx prisma migrate deploy"
]

# Run from apps/api on the platform-injected $PORT, force production
run = ["bash","-lc","cd apps/api && PORT=$PORT NODE_ENV=production node dist/index.js"]

# IMPORTANT: delete ALL your [[ports]] blocks from this file
Why: one process, one port. Replit injects $PORT → your app binds to it → health probe succeeds.
Also: this satisfies your requirement (npm at root, npx/node in apps/api).
2) Root package.json (lets you control builds from root)
{
  "name": "root",
  "private": true,
  "scripts": {
    "dev": "concurrently -k -n WEB,API -c cyan,magenta \"npm --prefix apps/web run dev\" \"npm --prefix apps/api run dev\"",
    "build": "npm --prefix apps/web run build && npm --prefix apps/api run build",
    "build:api": "npm --prefix apps/api run build",
    "build:web": "npm --prefix apps/web run build",
    "migrate": "cd apps/api && npx prisma migrate deploy"
  },
  "devDependencies": { "concurrently": "^8.2.0" }
}
(If you don’t have apps/web, keep the API lines, drop the web ones.)
3) apps/api/package.json (clean, production start)
{
  "name": "hogu-api",
  "private": true,
  "type": "module",
  "scripts": {
    "dev": "ts-node src/index.ts",
    "build": "tsc -p tsconfig.json",
    "start": "NODE_ENV=production node dist/index.js",
    "migrate": "npx prisma migrate deploy"
  }
}
4) Tiny but critical tweaks to apps/api/src/index.ts
Keep health routes first and trivial.
Bind to $PORT and 0.0.0.0.
Don’t block startup on Prisma; connect in the background.
Remove the duplicate SIGTERM handler.
// ➜ HEALTH FIRST, before CORS/JSON
app.get("/", (_req, res) => res.status(200).type("text/plain").send("ok"));
app.get("/health", (_req, res) => res.status(200).json({ status: "healthy" }));
app.get("/ready", (_req, res) => res.status(200).json({ status: "ready" }));

// (then CORS/JSON)
app.use(cors({ origin: true, credentials: false }));
app.use(express.json());

// ➜ LISTEN on platform port (and log it)
const PORT = Number(process.env.PORT || 8080);
const server = app.listen(PORT, "0.0.0.0", () => {
  console.log("LISTENING PORT:", PORT, "NODE_ENV:", process.env.NODE_ENV);
});
server.keepAliveTimeout = 65000;
server.headersTimeout   = 66000;
server.requestTimeout   = 60000;

// ➜ Prisma connect in the background (don’t exit on failure)
process.on("unhandledRejection", r => console.error("UNHANDLED REJECTION:", r));
process.on("uncaughtException", e => console.error("UNCAUGHT EXCEPTION:", e));

(async () => {
  try {
    await prisma.$connect();
    console.log("✅ Database connected successfully");
  } catch (e) {
    console.warn("⚠️ DB connect failed (continuing):", (e as Error).message);
  }
})();

// ➜ Keep ONE SIGTERM handler
process.on("SIGTERM", () => {
  console.log("SIGTERM received, shutting down gracefully");
  server.close(() => {
    console.log("Process terminated");
    process.exit(0);
  });
});
(Your other routes can stay as-is; just don’t declare any route inside another.)